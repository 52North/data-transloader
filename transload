#!/usr/bin/env ruby -Ilib
require 'transloader'

SemanticLogger.add_appender(io: $stdout, level: :warn)
SemanticLogger.add_appender(io: $stderr, level: :error)

def get_metadata(options, http_client)
  case options.provider
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(options.cache, http_client)
    station = provider.get_station(station_id: options.station_id)
    station.save_metadata
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(options.cache)
    station = provider.get_station(user_id: options.user_id, 
                                   station_id: options.station_id)
    station.save_metadata
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(options.cache)
    station = provider.get_station(station_id: options.station_id, 
                                   data_urls: options.data_urls)
    station.save_metadata
  end
end

def put_metadata(options, http_client)
  case options.provider
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(options.cache, http_client)
    station = provider.get_station(station_id: options.station_id)
    station.upload_metadata(options.destination,
      allowed: options.allowed,
      blocked: options.blocked)
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(options.cache)
    station = provider.get_station(user_id: options.user_id,
                                   station_id: options.station_id)
    station.upload_metadata(options.destination,
      allowed: options.allowed,
      blocked: options.blocked)
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(options.cache)
    station = provider.get_station(station_id: options.station_id)
    station.upload_metadata(options.destination,
      allowed: options.allowed,
      blocked: options.blocked)
  end
end

def get_observations(options, http_client)
  case options.provider
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(options.cache, http_client)
    station = provider.get_station(station_id: options.station_id)
    station.save_observations
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(options.cache)
    station = provider.get_station(user_id: options.user_id,
                                   station_id: options.station_id)
    station.save_observations
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(options.cache)
    station = provider.get_station(station_id: options.station_id)
    station.save_observations
  end
end

def put_observations(options, http_client)
  case options.provider
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(options.cache, http_client)
    station = provider.get_station(station_id: options.station_id)
    station.save_metadata
    station.upload_metadata(options.destination,
      allowed: options.allowed,
      blocked: options.blocked)
    station.upload_observations_in_interval(options.destination, options.date,
      allowed: options.allowed,
      blocked: options.blocked)
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(options.cache)
    station = provider.get_station(user_id: options.user_id,
                                   station_id: options.station_id)
    station.upload_observations_in_interval(options.destination, options.date,
      allowed: options.allowed,
      blocked: options.blocked)
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(options.cache)
    station = provider.get_station(station_id: options.station_id)
    station.upload_observations_in_interval(options.destination, options.date,
      allowed: options.allowed,
      blocked: options.blocked)
  end
end

# Parse Args
parser = Transloader::CommandLineOptionParser.new
args = parser.parse(ARGV)

verb = args[0]
noun = args[1]
options = args[2]
# Create re-usable HTTP client with pre-set options
http_client = Transloader::HTTP.new(auth: options.http_auth)

# Determine action
if verb == :get && noun == :metadata
  get_metadata(options, http_client)
elsif verb == :put && noun == :metadata
  put_metadata(options, http_client)
elsif verb == :get && noun == :observations
  get_observations(options, http_client)
elsif verb == :put && noun == :observations
  put_observations(options, http_client)
end
