#!/usr/bin/env ruby -w -Ilib
require 'transloader'

def get_station_metadata(source:, user_id:, station_id:, data_urls:, cache:)
  case source
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(cache)
    station = provider.get_station(station_id)
    station.save_metadata
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(cache)
    station = provider.get_station(user_id, station_id)
    station.save_metadata
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(cache)
    station = provider.get_station(station_id, data_urls)
    station.save_metadata
  else
    $stderr.puts "ERROR: Support for source not implemented"
    exit 1
  end
end

def get_station_observations(source:, user_id:, station_id:, cache:)
  case source
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(cache)
    station = provider.get_station(station_id)
    station.save_observations
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(cache)
    station = provider.get_station(user_id, station_id)
    station.save_observations
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(cache)
    station = provider.get_station(station_id, [])
    station.save_observations
  else
    $stderr.puts "ERROR: Support for source not implemented"
    exit 1
  end
end

def put_station_metadata(source:, user_id:, station_id:, cache:, destination:)
  case source
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(cache)
    station = provider.get_station(station_id)
    station.upload_metadata(destination)
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(cache)
    station = provider.get_station(user_id, station_id)
    station.upload_metadata(destination)
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(cache)
    station = provider.get_station(station_id, [])
    station.upload_metadata(destination)
  else
    $stderr.puts "ERROR: Support for source not implemented"
    exit 1
  end
end

def put_station_observations(source:, user_id:, station_id:, cache:, destination:, date:)
  case source
  when "environment_canada"
    provider = Transloader::EnvironmentCanadaProvider.new(cache)
    station = provider.get_station(station_id)
    station.save_metadata
    station.upload_metadata(destination)
    station.upload_observations(destination, date)
  when "data_garrison"
    provider = Transloader::DataGarrisonProvider.new(cache)
    station = provider.get_station(user_id, station_id)
    station.upload_observations(destination, date)
  when "campbell_scientific"
    provider = Transloader::CampbellScientificProvider.new(cache)
    station = provider.get_station(station_id, [])
    station.upload_observations(destination, date)
  else
    $stderr.puts "ERROR: Support for source not implemented"
    exit 1
  end
end

# Parse Args
args = Transloader::Args.new(ARGV)

# Determine action

case args.verb
when :get
  case args.object
  when :metadata
    get_station_metadata(
      source:     args.source,
      user_id:    args.user,
      station_id: args.station,
      data_urls:  args.data_urls,
      cache:      args.cache
    )
  when :observations
    get_station_observations(
      source:     args.source,
      user_id:    args.user,
      station_id: args.station,
      cache:      args.cache
     )
  end
when :put
  case args.object
  when :metadata
    put_station_metadata(
      source:      args.source,
      user_id:     args.user,
      station_id:  args.station,
      cache:       args.cache,
      destination: args.destination
    )
  when :observations
    put_station_observations(
      source:      args.source,
      user_id:     args.user,
      station_id:  args.station,
      cache:       args.cache,
      destination: args.destination,
      date:        args.date
    )
  end
end
