#!/usr/bin/env ruby -w
require 'date'

# Parse Args
arguments = {
  cache:   nil,
  date:    nil,
  object:  nil,
  source:  nil,
  station: nil,
  verb:    nil
}

def print_help
  puts "Usage: transload <get|put> <metadata|observations> <arguments>"
  puts "--source SOURCE             Data source; allowed: 'environment_canada'"
  puts "--station STATION           Station identifier"
  puts "--cache CACHE               Path for filesystem storage cache"
  puts "--date DATE                 ISO8601 date for 'put observations'. Also supports 'latest'"
  puts "--help                      Print this help message"
end

if ARGV.count == 0
  puts "ERROR: Missing arguments"
  print_help()
  exit 1
end

if ARGV.include?("--help")
  print_help()
  exit 0
end

verb_arg = ARGV.shift

if verb_arg.casecmp?("get")
  arguments[:verb] = :get
elsif verb_arg.casecmp?("put")
  arguments[:verb] = :put
else
  puts "ERROR: invalid verb"
  print_help()
  exit 1
end

object_arg = ARGV.shift

if object_arg.casecmp?("metadata")
  arguments[:object] = :metadata
elsif object_arg.casecmp?("observations")
  arguments[:object] = :observations
else
  puts "ERROR: invalid target"
  print_help()
  exit 1
end

while ARGV.count > 0
  arg = ARGV.shift
  case arg
  when "--source"
    arguments[:source] = ARGV.shift
  when "--station"
    arguments[:station] = ARGV.shift
  when "--cache"
    arguments[:cache] = ARGV.shift
  when "--date"
    arguments[:date] = ARGV.shift
  else
    puts "ERROR: unknown argument: #{arg}"
    print_help()
    exit 1
  end
end

# Validate Args

if arguments[:verb].nil?
  puts "Error: Unknown verb"
  print_help()
  exit 1
end

if arguments[:object].nil?
  puts "Error: Unknown target"
  print_help()
  exit 1
end

case arguments[:source]
when "environment_canada"
  # okay
else
  puts "Error: invalid source '#{arguments[:source]}'"
  print_help()
  exit 1
end

if arguments[:cache].nil? || !Dir.exist?(arguments[:cache])
  puts "Error: cache directory does not exist"
  print_help()
  exit 1
end

if arguments[:verb] == :put && arguments[:object] == :observations
  begin
    DateTime.iso8601(arguments[:date])
  rescue ArgumentError
    if arguments[:date].nil? || !arguments[:date].casecmp?("latest")
      puts "Error: Invalid date `#{arguments[:date]}`"
      print_help()
      exit 1
    end
  end
end
